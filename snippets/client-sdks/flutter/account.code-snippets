{
  "Create account": {
    "prefix": ["afca", "flutterCreateAccount"],
    "body": [
      "Client client = Client();",
      "Account account = Account(client);",
      "",
      "client",
      ".setEndpoint('${1: Your API Endpoint}')",
      ".setProject('${2: Your project ID }')",
      ";",
      "",
      "Future result = account.create(",
      "userId: '[USER_ID]',",
      "email: 'email@example.com',",
      "password: 'password',",
      ");",
      "",
      "",
      "result",
      ".then((result) {",
      "     print(result);",
      "}).catchError((error) {",
      "     print(error.result);",
      " });"
    ],
    "description": "Create a new Account"
  },

  "Create account Session": {
    "prefix": [
      "afas",
      "createAccountSession",
      "createSession",
    ],
    "body": [
        "Future session = account.createSession(",
        "email: 'email@example.com',",
        "password: 'password',",
        ");",
    ],
    "description": "Create a new Account Session"
  },

  "Create account Session with OAuth2": {
    "prefix": ["afaso","accountSessionOAuth2"],
    "body": [
      "Future result = account.createOAuth2Session(",
      "provider: 'amazon',",
      ");"
    ],
    "description": "Create a new Account Session with OAuth2"
  },

  "Create Magic Url session": {
    "prefix": [
      "amus",
      "createSessionAccount",
      "magicUrl",
      "mgURLSession"
    ],
    "body": [
        "Future session = account.createMagicURLSession(",
        "userId: '[USER_ID]',",
        "email: 'email@example.com',",
        "",
    ],
    "description": "Create a new account session with Magic Url"
  },
  "Create Magic URL session (confirmation)": {
    "prefix": ["amusc", "confirmMagicUrl", "mgURLSessionConfirmation"],
    "body": [
        "Future result = account.createMagicURLSession(",
        "userId: '[USER_ID]',",
        "secret: '[SECRET]',",
        "",
    ],
    "description": "Create Magic URL session (confirmation)"
  },

  "Create Anonymous session": {
    "prefix": ["aas", "AnonymousSession", "createAnonymousSession"],
    "body": ["Future result = account.createAnonymousSession();"],
    "description": "Create a new Anonymous Session"
  },

  "Create Account JWT": {
    "prefix": ["aajwt", "aaj"],
    "body": ["Future result = await account.createJWT();"],
    "description": "Create a new Account using JWT"
  },

  "Get Account": {
    "prefix": ["agc","getAccount"],
    "body": ["final user = await account.get();"],
    "description": "Get currently logged in user data as JSON object."
  },

  "Get Account Preferences": {
    "prefix": ["aap","getAccountPreferences"],
    "body": ["Future result = account.getPrefs();"],
    "description": "Get currently logged in user preferences as a key-value object."
  },

  "Get Account Sessions": {
    "prefix": ["aas","getAccountSession"],
    "body": ["Future result = account.getSessions();"],
    "description": "Get currently logged in user list of active sessions across different devices."
  },

  "Get Account Logs": {
    "prefix": ["aal","getAccountLogs"],
    "body": ["Future result = account.getLogs();"],
    "description": "Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log."
  },

  "Get Session by ID": {
    "prefix": ["asbi","getSessionId", "getSessionbyId"],
    "body": ["Future result = account.getSesssion(sessionId: '$1');"],
    "description": "Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used."
  },

  "Update Account Name": {
    "prefix": ["auan","updateName", "upName"],
    "body": ["Future result = account.updateName(name: '$1');"],
    "description": "Update currently logged in user account name."
  },

  "Update Account Password": {
    "prefix": ["auap","updatePassword"],
    "body": ["Future result = account.updatePassword(password: '$1');"],
    "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional."
  },

  "Update Account Email": {
    "prefix": ["uae","updateEmail"],
    "body": [
      "Future result = account.updateEnail(email: '$1', password: '$2');"
    ],
    "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional."
  },

  "Update Account Preferences": {
    "prefix": ["auap","updatePreferences"],
    "body": ["Future result = account.updatePrefs(prefs: {$1});"],
    "description": "Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded."
  },

  "Delete Account": {
    "prefix": ["ada","deleteAccount", "delAcc"],
    "body": ["await account.delete();"],
    "description": "Delete a currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. This is done to avoid deleted accounts being overtaken by new users with the same email address. Any user-related resources like documents or storage files should be deleted separately."
  },

  "Delete Account Session": {
    "prefix": ["adas","deleteAccountSession", "delAccSession"],
    "body": ["await account.deleteSession(sessionId: '$1');"],
    "description": "Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted."
  },

  "Delete All Account Sessions": {
    "prefix": ["adaas","deleteAccountSessions"],
    "body": ["await account.deleteSessions();"],
    "description": "Delete all sessions from the user account and remove any sessions cookies from the end client."
  },

  "Create Password Recovery": {
    "prefix": ["cpr","recPassword", "crRecovery"],
    "body": [
      "Future result = account.createRecovery(email: '$1', url:'$2');"
    ],
    "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
  },

  "Create Password Recovery(confirmation)": {
    "prefix": ["acprc","upRecovery", "updateRecovery"],
    "body": [
      "Future result = account.updateRecovery(userId: '$1', secret:'$2',password: '$3',passwordAgain:'$4');"
    ],
    "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
  },

  "Create Email Verification": {
    "prefix": ["acev","emailVerification"],
    "body": ["Future result = account.createVerification(url: '$1');"],
    "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the userId and secret arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the userId and secret parameters. Learn more about how to complete the verification process. The verification link sent to the user's email address is valid for 7 days."
  },

  "Create Email Verification(confirmation)": {
    "prefix": ["acevc","emailVerificationconfirmation"],
    "body": [
      "Future result = account.updateVerification(userId: '$1',secret: '$2');"
    ],
    "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the userId and secret arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the userId and secret parameters. Learn more about how to complete the verification process. The verification link sent to the user's email address is valid for 7 days."
  }
}
